        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Jared Tence
        -:    2: * tencej
        -:    3: * CS362
        -:    4: * unittest2 fullDeccCardCount();
        -:    5: */
        -:    6:
        -:    7:
        -:    8: #include "dominion.h"
        -:    9: #include "dominion_helpers.h"
        -:   10: #include <string.h>
        -:   11: #include <stdio.h>
        -:   12: #include <assert.h>
        -:   13:
        -:   14:
      180:   15:void testfullDeckCount(int correct,int player, int card, struct gameState *state){
      180:   16:  int result = fullDeckCount(player,card,state);
      180:   17:  if(result != correct){
    #####:   18:    printf("ERROR result %i doesn't equal correct result %i\n", result, correct);
        -:   19:  }else{
      180:   20:    printf("Passed result %i does match correct result %i\n", result, correct);
        -:   21:  }
      180:   22:}
        -:   23:
        1:   24:int main(){
        1:   25:  struct gameState * cGame = newGame();
        1:   26:  int kingdomC[10] = {estate, duchy, province, copper, silver, gold, adventurer,
        -:   27:              council_room, feast, gardens};
        -:   28:  int playersC[4][10];
        1:   29:  initializeGame(MAX_PLAYERS, kingdomC, 7, cGame);
        -:   30:  int i, j, cCard, lastCount;
        1:   31:  cCard = 0;
        5:   32:  for(i = 0; i < MAX_PLAYERS; i++){
        4:   33:    playersC[i][0] = 3;
       40:   34:    for(j = 1; j < 10; j++){
       36:   35:        playersC[i][j] = 0;
        -:   36:    }
        4:   37:    playersC[i][3] = 7;
        -:   38:  }
        -:   39:
        5:   40:  for(i = 0; i < MAX_PLAYERS; i++){
      193:   41:    for(j = 0; j < 50; j++){
      190:   42:      if(gainCard(kingdomC[cCard], cGame, j%3, i) == -1){
       10:   43:        cCard++;
       10:   44:        if(cCard > 9){
        1:   45:          i = MAX_PLAYERS;
        1:   46:          j = 20;
        1:   47:          break;
        -:   48:        }
        -:   49:      }else{
      180:   50:        playersC[i][cCard]++;
      180:   51:        testfullDeckCount(playersC[i][cCard], i,kingdomC[cCard], cGame);
        -:   52:      }
        -:   53:    }
        -:   54:  }
        -:   55:}
