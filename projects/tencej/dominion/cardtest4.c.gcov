        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Jared Tence
        -:    2: * tencej
        -:    3: * CS362
        -:    4: * cardtest4.c adventurer
        -:    5: */
        -:    6:
        -:    7:
        -:    8: #include "dominion.h"
        -:    9: #include "dominion_helpers.h"
        -:   10: #include <string.h>
        -:   11: #include <stdio.h>
        -:   12: #include <assert.h>
        -:   13:
        1:   14: void main(){
        1:   15:   struct gameState * cGame = newGame();
        1:   16:   int kingdomC[10] = {estate, duchy, province, copper, silver, gold, adventurer,
        -:   17:               council_room, feast, adventurer};
        1:   18:   initializeGame(MAX_PLAYERS, kingdomC, 7, cGame);
        -:   19:   int * junk;
        1:   20:   cGame->hand[ 0 ][ cGame->handCount[0] ] = adventurer;
        1:   21:   cGame->handCount[0]++;
        -:   22:
       11:   23:   for(int i = 0; i < 10; i++){
       10:   24:     cGame->deck[ 0 ][ cGame->deckCount[0] ] = province;
       10:   25:     cGame->deckCount[0]++;
        -:   26:   }
        -:   27:
        1:   28:   cGame->discard[0][ cGame->discardCount[0] ] = copper;
        1:   29:   cGame->discardCount[0]++;
        1:   30:   cGame->discard[0][ cGame->discardCount[0] ] = copper;
        1:   31:   cGame->discardCount[0]++;
        1:   32:  int boolError = 0;
        1:   33:  int pastHSize = cGame->handCount[0];
        1:   34:  int pastDSize = cGame->discardCount[0];
        1:   35:  int pastNActions = cGame->numActions;
        1:   36:  cardEffect(adventurer, 0,0,0, cGame, cGame->handCount[0]-1, junk);
        1:   37:  if(cGame->handCount[0] != pastHSize + 1){
        1:   38:    printf("ERROR adventurer drawing wrong amount of cards\n");
        1:   39:    boolError = 1;
    #####:   40:  }else if(cGame->discard[0][cGame->discardCount[0]-1] != adventurer){
    #####:   41:    printf("ERROR adventurer card not discarded\n");
    #####:   42:    boolError = 1;
    #####:   43:  }else if(cGame->numActions != pastNActions){
    #####:   44:    printf("ERROR adventurer adding wrong amount of actions\n");
    #####:   45:    boolError = 1;
    #####:   46:  }else if(cGame->hand[0][cGame->handCount[0]-1] == copper || cGame->hand[0][cGame->handCount[0]-1] == silver || cGame->hand[0][cGame->handCount[0]-1] == gold){
    #####:   47:    printf("ERROR adventurer copper, gold, or silver not added to hand for card 1");
    #####:   48:    boolError = 1;
    #####:   49:  }else if(cGame->hand[0][cGame->handCount[0]-2] == copper || cGame->hand[0][cGame->handCount[0]-2] == silver || cGame->hand[0][cGame->handCount[0]-2] == gold){
    #####:   50:    printf("ERROR adventurer copper, gold, or silver not added to hand for card 2");
    #####:   51:    boolError = 1;
        -:   52:  }
        -:   53:  int i;
        8:   54:  for(i = pastDSize; i < cGame->discardCount[0]-1; i++){
        7:   55:     if(cGame->discard[0][i] == copper || cGame->discard[0][i] != gold || cGame->discard[0][i] != silver){
        7:   56:     printf("ERROR copper gold or silver was discarded\n");
        7:   57:     boolError = 1;
        -:   58:    }
        -:   59:   }
        1:   60:  if(boolError){
        1:   61:   printf("FAILED\n");
        -:   62:  }else{
    #####:   63:    printf("PASSED\n");
        -:   64:  }
        1:   65: }
