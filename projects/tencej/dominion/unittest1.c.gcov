        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Jared Tence
        -:    2: * tencej
        -:    3: * CS362
        -:    4: * unittest1 gainCard();
        -:    5: */
        -:    6:
        -:    7:
        -:    8: #include "dominion.h"
        -:    9: #include "dominion_helpers.h"
        -:   10: #include <string.h>
        -:   11: #include <stdio.h>
        -:   12: #include <assert.h>
        -:   13:
        -:   14:
       76:   15:void testsupplyCount(int correct, int card, struct gameState *state){
       76:   16:  int result = supplyCount(card,state);
       76:   17:  if(result != correct){
    #####:   18:    printf("ERROR result %i doesn't equal correct result %i\n", result, correct);
        -:   19:  }else{
       76:   20:    printf("Passed result %i does match correct result %i\n", result, correct);
        -:   21:  }
       76:   22:}
        -:   23:
        1:   24:int main(){
        1:   25:  struct gameState * cGame = newGame();
        1:   26:  int kingdomC[10] = {estate, duchy, province, copper, silver, gold, adventurer,
        -:   27:              council_room, feast, gardens};
        1:   28:  int stratingC[10] = {12,12,12,32,40,30,10,10,10,12};
        1:   29:  initializeGame(MAX_PLAYERS, kingdomC, 7, cGame);
        -:   30:  int i, j, cCard, lastCount;
        1:   31:  cCard = 0;
        1:   32:  lastCount = stratingC[cCard];
        -:   33:
        5:   34:  for(i = 0; i < MAX_PLAYERS; i++){
       84:   35:    for(j = 0; j < 20; j++){
       80:   36:      if(gainCard(kingdomC[cCard], cGame, j%2, i) == -1){
        4:   37:        cCard++;
        4:   38:        if(cCard > 9){
    #####:   39:          i = MAX_PLAYERS;
    #####:   40:          j = 20;
    #####:   41:          break;
        -:   42:        }
        4:   43:        lastCount = stratingC[cCard];
        -:   44:      }else{
       76:   45:        lastCount--;
       76:   46:        testsupplyCount(lastCount,kingdomC[cCard], cGame);
        -:   47:      }
        -:   48:    }
        -:   49:  }
        -:   50:}
